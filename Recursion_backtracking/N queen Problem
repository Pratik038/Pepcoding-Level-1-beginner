bool check(vector<vector<int>> &board,int row,int col,int n){
        // vertical
        for(int i=row-1,j=col;i>=0;i--){
            if(board[i][j]==1)
                return false;
        }
    
        for(int i=row-1,j=col-1;i>=0 and j>=0;i--,j--){
            if(board[i][j]==1)
                return false;
        }
    
        for(int i=row-1,j=col+1;i>=0 and j<n;i--,j++){
            if(board[i][j]==1)
                return false;
        }
    
        return true;
    }
    void solve(vector<vector<int>> &board,int row,int n,vector<vector<int>> &ans){
        
        if(row == n){
            vector<int> v;
            for(int i=0;i<n;i++){
                for(int j=0;j<n;j++){
                    if(board[i][j] ==1){
                        v.push_back(j+1);
                    }
                }
            }
            ans.push_back(v);
            return;
        }
        
        for(int col=0;col<n;col++){
            if(check(board,row,col,n) == true){
                board[row][col] = 1;
                
                solve(board,row+1,n,ans);
                
                board[row][col] = 0;
            }
        }
    }
    vector<vector<int>> nQueen(int n) {
        vector<vector<int>> board(n, vector<int> (n,0));
        vector<vector<int>> ans;
        solve(board,0,n,ans);
        return ans;
    }
